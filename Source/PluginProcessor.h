/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "BiQuad.h"


//==============================================================================
/**
*/
class PluginAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    PluginAudioProcessor();
    ~PluginAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;
    float getParameterDefaultValue (int index) override; // Not included in default Juce template

    const String getParameterName (int index) override;
    const String getParameterText (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    enum Parameters
    {
        f1FreqParam,
        f1GainParam,
        f1QParam,
        f2FreqParam,
        f2GainParam,
        f2QParam,
        f3FreqParam,
        f3GainParam,
        f3QParam,
        outputGainParam,
        totalNumParams
    };
    
    // Host/Control Values (0-1.f)
    float uf1Freq,      uf2Freq,        uf3Freq;
    float uf1Q,         uf2Q,           uf3Q;
    float uf1GainDb,    uf2GainDb,      uf3GainDb;
    float uOutputGainDb;
    
private:
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PluginAudioProcessor)
    
    // Default Algorithm Values
    const float DEFAULT_A_F1_FREQ = 120.f;
    const float DEFAULT_A_F2_FREQ = 800.f;
    const float DEFAULT_A_F3_FREQ = 12000.f;
    const float DEFAULT_A_FILTER_Q = 0.71f;
    const float DEFAULT_A_FILTER_GAIN_DB = 0.f;
    const float DEFAULT_A_OUTPUT_GAIN = 1.f;
    
    // Default Host/Control Values (Must be 0-1.f mapping)
    const float DEFAULT_U_F1_FREQ           = (DEFAULT_A_F1_FREQ - 20) / 19980;
    const float DEFAULT_U_F2_FREQ           = (DEFAULT_A_F2_FREQ - 20) / 19980;
    const float DEFAULT_U_F3_FREQ           = (DEFAULT_A_F3_FREQ - 20) / 19980;
    const float DEFAULT_U_FILTER_Q          = (DEFAULT_A_FILTER_Q - 0.1f) / 9.9f;
    const float DEFAULT_U_FILTER_GAIN_DB    = 0.5f;
    const float DEFAULT_U_OUTPUT_GAIN_DB    = 0.5f;
    
    // Algorithm Values
    float fs;           // Sampling Frequency
    float af1Freq,      af2Freq,        af3Freq;
    float af1Q,         af2Q,           af3Q;
    float af1GainDb,    af2GainDb,      af3GainDb;
    float aOutputGain;
    
    // Filters
    stk::BiQuad filter1, filter2, filter3;
    float tmp1, tmp2, tmp3, tmp4, tmp5, tmp6;   // intermediate values
    
    // Filter1 Coefficients
    float af1A, af1w0, af1Alpha;
    float f1b0, f1b1, f1b2, f1a1, f1a2;
    void calculateFilter1Coefficients();

    // Filter2 Coefficients
    float af2A, af2w0, af2Alpha;
    float f2b0, f2b1, f2b2, f2a1, f2a2;
    void calculateFilter2Coefficients();

    // Filter3 Coefficients
    float af3A, af3w0, af3Alpha;
    float f3b0, f3b1, f3b2, f3a1, f3a2;
    void calculateFilter3Coefficients();
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
